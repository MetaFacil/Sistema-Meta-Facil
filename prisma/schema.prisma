generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String             @id @default(cuid())
  name              String?
  email             String             @unique
  emailVerified     DateTime?
  image             String?
  password          String?
  role              String             @default("USER")
  plan              String             @default("FREE")
  company           String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  accounts          Account[]
  campaigns         Campaign[]
  connectedAccounts ConnectedAccount[]
  contents          Content[]
  sessions          Session[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Content {
  id           String             @id @default(cuid())
  userId       String
  title        String
  body         String
  type         String             @default("POST")
  category     String             @default("EDUCATIONAL")
  status       String             @default("DRAFT")
  platforms    String?
  hashtags     String?
  scheduledFor DateTime?
  publishedAt  DateTime?
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  analytics    ContentAnalytics[]
  user         User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  mediaFiles   MediaFile[]

  @@map("contents")
}

model MediaFile {
  id        String   @id @default(cuid())
  contentId String?
  type      String
  url       String
  filename  String
  size      Int
  mimeType  String
  createdAt DateTime @default(now())
  content   Content? @relation(fields: [contentId], references: [id], onDelete: Cascade)

  @@map("media_files")
}

model Campaign {
  id             String    @id @default(cuid())
  userId         String
  name           String
  description    String?
  type           String    @default("ORGANIC")
  status         String    @default("DRAFT")
  budget         Float?
  startDate      DateTime
  endDate        DateTime?
  targetAudience String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("campaigns")
}

model ConnectedAccount {
  id           String    @id @default(cuid())
  userId       String
  provider     String
  accountId    String
  accountName  String
  accessToken  String
  refreshToken String?
  expiresAt    DateTime?
  isActive     Boolean   @default(true)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, accountId])
  @@map("connected_accounts")
}

model ContentAnalytics {
  id               String             @id @default(cuid())
  contentId        String
  platform         String
  impressions      Int                @default(0)
  reach            Int                @default(0)
  likes            Int                @default(0)
  comments         Int                @default(0)
  shares           Int                @default(0)
  saves            Int                @default(0)
  engagement       Float              @default(0)
  clickThroughRate Float?
  lastUpdated      DateTime           @default(now())
  history          AnalyticsHistory[]
  content          Content            @relation(fields: [contentId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("content_analytics")
}

model AnalyticsHistory {
  id               String           @id @default(cuid())
  analyticsId      String
  platform         String
  impressions      Int
  reach            Int
  likes            Int
  comments         Int
  shares           Int
  saves            Int
  engagement       Float
  clickThroughRate Float?
  recordedAt       DateTime         @default(now())
  analytics        ContentAnalytics @relation(fields: [analyticsId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("analytics_history")
}
